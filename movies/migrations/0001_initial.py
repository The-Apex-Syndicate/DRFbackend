# Generated by Django 5.2.2 on 2025-06-15 20:36

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Actor",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("gender", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProductionCompany",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                "verbose_name_plural": "ProductionCompanies",
            },
        ),
        migrations.CreateModel(
            name="ProductionCountry",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "verbose_name_plural": "ProductionCountries",
            },
        ),
        migrations.CreateModel(
            name="SpokenLanguage",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("dob", models.DateField()),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Movie",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("adult", models.BooleanField(blank=True, default=False, null=True)),
                (
                    "original_language",
                    models.CharField(blank=True, max_length=5, null=True),
                ),
                (
                    "original_title",
                    models.CharField(blank=True, max_length=300, null=True),
                ),
                ("overview", models.TextField(blank=True, null=True)),
                ("popularity", models.FloatField(blank=True, null=True)),
                (
                    "poster_path",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("release_date", models.DateField(blank=True, null=True)),
                ("revenue", models.FloatField(blank=True, null=True)),
                ("runtime", models.FloatField(blank=True, null=True)),
                ("status", models.CharField(blank=True, max_length=20, null=True)),
                ("tagline", models.TextField(blank=True, null=True)),
                ("title", models.TextField(blank=True, max_length=300, null=True)),
                ("video", models.BooleanField(blank=True, null=True)),
                ("vote_average", models.FloatField(blank=True, null=True)),
                ("vote_count", models.FloatField(blank=True, null=True)),
                ("rating", models.FloatField(blank=True, null=True)),
                (
                    "video_url",
                    models.TextField(blank=True, default="", max_length=500, null=True),
                ),
                (
                    "genres",
                    models.ManyToManyField(
                        blank=True, related_name="movie_genre", to="movies.genre"
                    ),
                ),
                (
                    "production_companies",
                    models.ManyToManyField(
                        blank=True,
                        related_name="movie_production_companies",
                        to="movies.productioncompany",
                    ),
                ),
                (
                    "production_countries",
                    models.ManyToManyField(
                        blank=True,
                        related_name="movie_production_countries",
                        to="movies.productioncountry",
                    ),
                ),
                (
                    "spoken_languages",
                    models.ManyToManyField(
                        blank=True,
                        related_name="movie_spoken_language",
                        to="movies.spokenlanguage",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MovieActorMap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "character_name",
                    models.CharField(blank=True, max_length=300, null=True),
                ),
                (
                    "profile_path",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="movies.actor",
                    ),
                ),
                (
                    "movie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cast",
                        to="movies.movie",
                    ),
                ),
            ],
            options={
                "unique_together": {("movie", "actor", "character_name")},
            },
        ),
        migrations.CreateModel(
            name="WishList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "movie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="movies.movie"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "movie")},
            },
        ),
    ]
